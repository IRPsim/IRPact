plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
}

group 'de.unileipzig.irpact'
version '1.0-SNAPSHOT'

//sourceCompatibility = 1.11
sourceCompatibility = 1.8

repositories {
    //geotools als erstes, sonst werden libs nicht gefunden...
    maven { url "https://repo.osgeo.org/repository/release/" }
    maven { url "http://download.java.net/maven/2" }

    maven { url "https://nexus.actoron.com/content/repositories/oss-nightlies" }

    mavenCentral()
    jcenter()
}

test {
    useJUnitPlatform()
}

//==================================================
// sourcesets
//==================================================

sourceSets {
    toymodel {
        java {
            srcDir 'src/toymodel/java'
        }
        resources {
            srcDir 'src/toymodel/resources'
        }
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

configurations {
    toymodelImplementation.extendsFrom(testImplementation)
    toymodelRuntimeOnly.extendsFrom(testRuntimeOnly)
}

task toymodel(type: Test) {
    description = "Run IRPact toy-models"
    group = "verification"
    testClassesDirs = sourceSets.toymodel.output.classesDirs
    classpath = sourceSets.toymodel.runtimeClasspath

    useJUnitPlatform()
}

idea {
    module {
        testSourceDirs += project.sourceSets.toymodel.java.srcDirs
        testSourceDirs += project.sourceSets.toymodel.resources.srcDirs
    }
}

//==================================================
//dependencies
//==================================================

ext {
    junitJupiterVersion = '5.4.2'
    jacksonVersion = '2.10.2'
    jadexDistVersion = '4.0.187' //'4.0.171'
    logbackVersion = '1.2.3'
    apachePoiVersion = '5.0.0'
}

dependencies {
    testCompileOnly "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testCompileOnly "org.apiguardian:apiguardian-api:1.0.0"
    toymodelCompileOnly "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    toymodelCompileOnly "org.apiguardian:apiguardian-api:1.0.0"
    runtimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    runtimeOnly "org.junit.vintage:junit-vintage-engine:$junitJupiterVersion"
    runtimeOnly "org.junit.platform:junit-platform-launcher:1.4.2"

    //implementation "org.activecomponents.jadex:jadex-distribution-standard:$jadexDistVersion"
    implementation "org.activecomponents.jadex:jadex-distribution-minimal:$jadexDistVersion"
    implementation "org.activecomponents.jadex:jadex-kernel-bdiv3:$jadexDistVersion"

    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:$jacksonVersion"

    implementation "info.picocli:picocli:4.2.0"

    implementation "org.slf4j:slf4j-api:1.7.30"

    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-core:$logbackVersion"

    implementation "org.geotools:gt-shapefile:23.2"
    implementation "org.geotools:gt-epsg-hsql:23.2"

    implementation "us.bpsm:edn-java:0.6.0"

    implementation 'guru.nidi:graphviz-java:0.17.1'

    //base32
    implementation "commons-codec:commons-codec:1.15"

    implementation "org.mariuszgromada.math:MathParser.org-mXparser:4.4.2"

    implementation "org.apache.poi:poi:$apachePoiVersion"
    implementation "org.apache.poi:poi-ooxml:$apachePoiVersion"

    //custom
    implementation files('customlibs/IRPtools-1.0-SNAPSHOT.jar')

    implementation 'org.citygml4j:citygml4j:2.11.3'
}

//==================================================
//jar
//==================================================

task buildUberJar(type: Jar) {
    archiveClassifier.set('uber')
    manifest {
        attributes 'Main-class': 'de.unileipzig.irpact.start.Start'
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

task buildStandardJar(type: Jar) {
    from sourceSets.main.output
    manifest {
        attributes 'Main-class': 'de.unileipzig.irpact.start.Start'
    }
}

artifacts {
    archives buildUberJar
    archives buildStandardJar
}
