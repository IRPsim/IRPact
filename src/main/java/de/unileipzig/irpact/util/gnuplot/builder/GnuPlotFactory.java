package de.unileipzig.irpact.util.gnuplot.builder;

import de.unileipzig.irpact.commons.color.ColorPalette;
import de.unileipzig.irpact.util.gnuplot.builder.plot.PlotCommandBuilder;
import de.unileipzig.irpact.util.gnuplot.builder.plot.PlotData;
import de.unileipzig.irpact.util.gnuplot.builder.plot.SimplifiedKeyEntry;
import de.unileipzig.irpact.util.gnuplot.builder.plot.SimplifiedNaN;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * @author Daniel Abitz
 */
public final class GnuPlotFactory {

    //=========================
    //
    //=========================

    public static final StringSettings SETTINGS = new StringSettings();

    private GnuPlotFactory() {
    }

    private static GnuPlotBuilder newBuilder() {
        GnuPlotBuilder builder = new GnuPlotBuilder();
        builder.setSettings(SETTINGS);
        return builder;
    }

    private static Comment getDate() {
        return new Comment("date: " + LocalDateTime.now());
    }

    private static Comment getAutoGenerated() {
        return new Comment("automatic generated gnuplot script");
    }

    private static Comment getUsageComment() {
        return new Comment("usage: gnuplot -c <script name> <input file> <output file>");
    }

    private static void setPngCairo(GnuPlotBuilder builder, int width, int height) {
        if(width > 0 && height > 0) {
            builder.printPngCairo(width, height);
        } else {
            builder.printPngCairo();
        }
    }

    private static List<Integer> createIndexList1(Collection<?> c) {
        return createIndexList(c, 1);
    }

    private static List<Integer> createIndexList(Collection<?> c, int startIndex) {
        return createIndexList(c.size(), startIndex);
    }

    private static List<Integer> createIndexList(int count, int startIndex) {
        List<Integer> list = new ArrayList<>(count);
        for(int i = 0; i < count; i++) {
            list.add(startIndex++);
        }
        return list;
    }

    private static <R> List<R> createList(Collection<?> c, R value) {
        return createList(c.size(), value);
    }

    private static <R> List<R> createList(int count, R value) {
        List<R> list = new ArrayList<>(count);
        for(int i = 0; i < count; i++) {
            list.add(value);
        }
        return list;
    }

    @SafeVarargs
    private static <R> List<R> createCycleList(Collection<?> c, R... values) {
        return createCycleList(c.size(), values);
    }

    @SafeVarargs
    private static <R> List<R> createCycleList(int count, R... values) {
        List<R> list = new ArrayList<>(count);
        for(int i = 0; i < count; i++) {
            list.add(values[i % values.length]);
        }
        return list;
    }

    private static List<String> getARGBList(ColorPalette cp) {
        return cp.stream()
                .map(ColorPalette::printARGBHex)
                .collect(Collectors.toList());
    }

    private static List<String> updateHexColor(Collection<? extends String> c) {
        return c.stream()
                .map(str -> {
                    if(str.startsWith("#")) {
                        return str;
                    } else {
                        return "#" + str;
                    }
                })
                .collect(Collectors.toList());
    }

    private static int calcIndex(Collection<?> c, int input) {
        return calcIndex(c.size(), input);
    }

    private static int calcIndex(int cycle, int input) {
        return (input % cycle) + 1;
    }

    //=========================
    //line chart
    //=========================

    public static GnuPlotBuilder lineChart0(
            String title,
            String xlab, String ylab, String grplab,
            String sep,
            int lineWidth,
            int width, int height) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: line chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataLinesPoints();
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.formatAndSetLegendOutsideRightTop(grplab);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.printUnknown();
        builder.plotGenericDataWithLinewidth(1, lineWidth);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.setWildcardXYRange();
        builder.replot();
        return builder;
    }

    public static GnuPlotBuilder interactionLineChart0(
            String title,
            String xlab, String ylab,
            String keyTitle0, String keyTitle1,
            String dashType0Label, String dashType1Label,
            String sep,
            int lineWidth,
            int width, int height) {
        SpecialInteractionLinePlotCommand plot = new SpecialInteractionLinePlotCommand();
        plot.setKeyTitle0(keyTitle0);
        plot.setKeyTitle1(keyTitle1);
        plot.setDashtype0(1);
        plot.setDashtype1(2);
        plot.setDashtype0Label(dashType0Label);
        plot.setDashtype1Label(dashType1Label);
        plot.setData(1);
        plot.setLinewidth(lineWidth);

        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: special line chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataLinesPoints();
        builder.setLegendOutsideRightTop();
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.printUnknown();
        builder.add(plot);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.setWildcardXYRange();
        builder.replot();
        return builder;
    }

    //TODO
    //year;value0-A;value0-B;...
    //1: year, even: A (2,4,6,...), odd: B (3,5,7,...)
    public static GnuPlotBuilder interactionLineChart0_CUSTOM(
            String title,
            String xlab, String ylab,
            String keyTitle0, String keyTitle1,
            String dashType1Label, String dashType2Label,
            List<String> colors,
            int lineWidth,
            int dashtype1, int dashtype2,
            String sep,
            int width, int height,
            Number minY, Number maxY,
            int numberOfIndividualColumns) {

        PlotCommandBuilder plot = new PlotCommandBuilder();
        plot.linebreak();
        //key
        //a-Part
        plot.add(new SimplifiedKeyEntry()
                .setTi(PlotCommandBuilder.quote(keyTitle0))
        );
        plot.commaAndLinebreak();
        plot.add(new SimplifiedNaN()
                .setLines()
                .setDt(dashtype1)
                .setLc(PlotCommandBuilder.quote("black"))
                .setTi(PlotCommandBuilder.quote(dashType1Label))
        );
        //b-Part
        plot.commaAndLinebreak();
        plot.add(new SimplifiedNaN()
                .setLines()
                .setDt(dashtype2)
                .setLc(PlotCommandBuilder.quote("black"))
                .setTi(PlotCommandBuilder.quote(dashType2Label))
        );
        //data
        plot.commaAndLinebreak();
        plot.add(new SimplifiedKeyEntry()
                .setTi(PlotCommandBuilder.quote(keyTitle1))
        );
        for(int i = 0; i < numberOfIndividualColumns; i++) {
            //a-Part
            int aIndex = (i+1)*2;
            plot.commaAndLinebreak();
            if(i == 0) {
                plot.add(new PlotData()
                        .setInput(PlotCommandBuilder.arg(1))
                        .setColumn1(1)
                        .setColumn2(aIndex)
                        .setColumn3(PlotCommandBuilder.xtic(1))
                        .setTi("col")
                        .setLs(calcIndex(colors, i))
                        .setDt(dashtype1)
                );
            } else {
                plot.add(new PlotData()
                        .setInput("''")
                        .setColumn1(1)
                        .setColumn2(aIndex)
                        .setTi("col")
                        .setLs(calcIndex(colors, i))
                        .setDt(dashtype1)
                );
            }

            //b-Part
            int bIndex = aIndex + 1;
            plot.commaAndLinebreak();
            plot.add(new PlotData()
                    .setInput("''")
                    .setColumn1(1)
                    .setColumn2(bIndex)
                    .setTi("col")
                    .setLs(calcIndex(colors, i))
                    .setDt(dashtype2)
            );
        }

        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: special line chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataLinesPoints();
        builder.setLegendOutsideRightTop();
        builder.setStyleLineWithWidthAndRGB(createIndexList1(colors), createList(colors, lineWidth), updateHexColor(colors));
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.printPngCairo(width, height);
        builder.setArgOutput(2);
        builder.setYRange(minY, maxY);
        builder.add(plot);
        return builder;
    }

    public static GnuPlotBuilder interactionLineChartForTwoValues0(
            String title,
            String xlab, String ylab,
            String sep,
            int lineWidth,
            int width, int height) {
        PlotCommandForTwoValuesAndLineWidthAndDashtype plot = new PlotCommandForTwoValuesAndLineWidthAndDashtype();
        plot.setData(1);
        plot.setDashtype0(1);
        plot.setDashtype1(2);
        plot.setLinewidth(lineWidth);

        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: special simple line chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataLinesPoints();
        builder.setLegendOutsideRightTop();
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.printUnknown();
        builder.add(plot);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.setWildcardXYRange();
        builder.replot();
        return builder;
    }

    public static GnuPlotBuilder interactionLineChartForNValues0(
            int n,
            String title,
            String xlab, String ylab,
            String sep,
            int lineWidth,
            int width, int height) {
        PlotCommandForNValuesAndLineWidthAndDashtype plot = new PlotCommandForNValuesAndLineWidthAndDashtype();
        plot.setN(n);
        plot.setData(1);
        plot.setDashtype0(1);
        plot.setDashtype1(2);
        plot.setLinewidth(lineWidth);

        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: special simple line chart for n values v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataLinesPoints();
        builder.setLegendOutsideRightTop();
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.printUnknown();
        builder.add(plot);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.setWildcardXYRange();
        builder.replot();
        return builder;
    }

    public static GnuPlotBuilder simpleMultiLinePlot0(
            String title,
            String xlab, String ylab,
            String sep,
            int lineWidth,
            int width, int height) {
        MultiDataPlotCommandWithLinewidth plot = new MultiDataPlotCommandWithLinewidth();
        plot.setData(1);
        plot.setLinewidth(lineWidth);

        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: special simple line chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataLinesPoints();
        builder.setLegendOutsideRightTop();
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.printUnknown();
        builder.add(plot);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.setWildcardXYRange();
        builder.replot();
        return builder;
    }

    public static GnuPlotBuilder interactionLineChartForVersionLess528(
            String title,
            String xlab, String ylab,
            String keyTitle0, String keyTitle1,
            String dashType0Label, String dashType1Label,
            String sep,
            int lineWidth,
            int numberOfEntries,
            int width, int height) {
        SpecialInteractionLinePlotCommandForVersionLess528 plot = new SpecialInteractionLinePlotCommandForVersionLess528();
        plot.setKeyTitle0(keyTitle0);
        plot.setKeyTitle1(keyTitle1);
        plot.setDashtype0(1);
        plot.setPointtype0(1);
        plot.setDashtype1(2);
        plot.setPointtype1(2);
        plot.setDashtype0Label(dashType0Label);
        plot.setDashtype1Label(dashType1Label);
        plot.setData(1);
        plot.setLinewidth(lineWidth);
        plot.setNumberOfEntries(numberOfEntries);

        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataLinesPoints();
        builder.setLegendOutsideRightTop();
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.printUnknown();
        builder.add(plot);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.setWildcardXYRange();
        builder.replot();
        return builder;
    }

    //=========================
    //box plot
    //=========================

    public static GnuPlotBuilder simpleBoxplot0(
            String title,
            String xlab, String ylab,
            String sep,
            int columnWidth,
            int width, int height) {
        SimpleBoxplotPlotCommand plot = new SimpleBoxplotPlotCommand();
        plot.setData(1);
        plot.setWidth(columnWidth);

        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: box plot v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setFillSolid025();
        builder.setStyleBoxplot();
        builder.setStyleDataBoxplot();
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.add(plot);
        return builder;
    }

    //=========================
    //stacked bar
    //=========================

    public static GnuPlotBuilder clusteredBarChart0(
            String title,
            String xlab, String ylab,
            String keylab,
            String sep,
            double boxWidthAbsolute,
            Double yMin, Double yMax,
            int width, int height) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: clustered bar chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataHistograms();
        builder.setStyleHistrogramClustered();
        builder.setFillSolid();
        builder.setBoxWidthAbsolute(boxWidthAbsolute);
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.setLegendOutsideRightTop(keylab);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.addComment("===plot===");
        builder.setYRange(yMin, yMax);
        builder.setDataFileSeparator(sep);
        builder.plotGenericDataWithLinewidth(1);
        return builder;
    }

    public static GnuPlotBuilder clusteredBarChartWithColorPalette0(
            String title,
            String xlab, String ylab,
            String keylab,
            String sep,
            double boxWidthAbsolute, ColorPalette cp,
            Double yMin, Double yMax,
            int width, int height) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: clustered bar chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataHistograms();
        builder.setStyleHistrogramClustered();
        builder.setFillSolid();
        builder.setBoxWidthAbsolute(boxWidthAbsolute);
        builder.addComment("===color===");
        builder.setStyleLineWithWidthAndRGB(createIndexList(cp.size(), 1), createList(cp.size(), 1), getARGBList(cp));
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.setLegendOutsideRightTop(keylab);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.addComment("===plot===");
        builder.setYRange(yMin, yMax);
        builder.setDataFileSeparator(sep);
        builder.plotGenericDataWithLinestyle(1, cp.size());
        return builder;
    }

    public static GnuPlotBuilder stackedBarChart0(
            String title,
            String xlab, String ylab, String filllab,
            String sep,
            double boxWidthAbsolute,
            int width, int height) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: stacked bar chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataHistograms();
        builder.setStyleHistrogramRowStacked();
        builder.setFillSolid();
        builder.setBoxWidthAbsolute(boxWidthAbsolute);
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.formatAndSetLegendOutsideRightTop(filllab);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.plotGenericDataWithLinewidth(1);
        return builder;
    }

    public static GnuPlotBuilder stackedBarChart1(
            String title,
            String xlab, String ylab, String filllab,
            String phase0, String phase1, String phase2,
            String sep,
            double boxWidthAbsolute,
            int width, int height,
            int ymin, int ymax) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: stacked bar chart v1");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setStyleDataHistograms();
        builder.setStyleHistrogramRowStacked();
        builder.setFillSolid();
        builder.setBoxWidthAbsolute(boxWidthAbsolute);
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.formatAndSetLegendOutsideRightTop(filllab);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setWildcardXRange();
        builder.setYRange(ymin, ymax);
        builder.setArgOutput(2);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.plot3DataColumns(
                phase0,
                phase1,
                phase2,
                1
        );
        return builder;
    }

    public static GnuPlotBuilder stackedBarChart1WithYRangeArgs(
            String title,
            String xlab, String ylab, String filllab,
            String phase0, String phase1, String phase2,
            String sep,
            double boxWidthAbsolute,
            int width, int height,
            int ymin, int ymax) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: stacked bar chart v1");
        builder.addComment("usage: gnuplot -c <script name> <input file> <output file> <ymin> <ymax>");
        builder.addComment("===style===");
        builder.setStyleDataHistograms();
        builder.setStyleHistrogramRowStacked();
        builder.setFillSolid();
        builder.setBoxWidthAbsolute(boxWidthAbsolute);
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.formatAndSetXLabel(xlab);
        builder.formatAndSetYLabel(ylab);
        builder.formatAndSetLegendOutsideRightTop(filllab);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setWildcardXRange();
        builder.setYRange(GnuPlotBuilder.arg(3), GnuPlotBuilder.arg(4));
        builder.setArgOutput(2);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.plot3DataColumns(
                phase0,
                phase1,
                phase2,
                1
        );
        return builder;
    }

    //=========================
    //circle
    //=========================

    public static GnuPlotBuilder circlesAndPoints(
            String title,
            Map<Integer, String> xtics,
            String sep,
            int width, int height) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: circle chart with points v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.setXTics(xtics);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.plotCirclesAndPoints(1);
        return builder;
    }

    //=========================
    //3D barchart
    //=========================

    public static GnuPlotBuilder barChart3D(
            String title,
            Map<Integer, String> ytics,
            String sep,
            int numberOfEntries,
            double boxWidthAbsolute,
            double rotx, double roty, int scale, int scalez,
            int width, int height) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getDate());
        builder.add(getAutoGenerated());
        builder.addComment("type: 3D bar chart v0");
        builder.add(getUsageComment());
        builder.addComment("===style===");
        builder.setBoxWidthAbsolute(boxWidthAbsolute);
        builder.setGridNoPolar();
        builder.setGridSetup1();
        builder.setGridSetup2();
        builder.setView(rotx, roty, scale, scalez);
        builder.setStyleDataHistograms();
        builder.setStyleHistrogramRowStacked();
        builder.setXYPlaneAt0();
        builder.setNoAnimation();
        builder.setPM3D();
        builder.addComment("===labels===");
        builder.formatAndSetTitle(title);
        builder.setYTics(ytics);
        builder.addComment("===output===");
        setPngCairo(builder, width, height);
        builder.setArgOutput(2);
        builder.addComment("===plot===");
        builder.setDataFileSeparator(sep);
        builder.splotBoxesReverse(numberOfEntries, 2, 1);
        return builder;
    }
}
