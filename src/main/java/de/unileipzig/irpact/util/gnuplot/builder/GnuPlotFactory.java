package de.unileipzig.irpact.util.gnuplot.builder;

import java.nio.file.Path;
import java.time.LocalDateTime;

/**
 * @author Daniel Abitz
 */
public final class GnuPlotFactory {

    public static final StringSettings SETTINGS = new StringSettings();

    private static final int NO_USAGE = -1;
    private static final int USAGE_ARG0 = 0;
    private static final int USAGE_ARG2 = 2;

    private GnuPlotFactory() {
    }

    private static Comment getAutoGenerated() {
        return new Comment("automatic generated gnuplot script (" + LocalDateTime.now() + ")");
    }

    private static String getUsageComment(int usageFlag) {
        switch (usageFlag) {
            case USAGE_ARG0:
                return "usage: gnuplot <scirpt name>";

            case USAGE_ARG2:
                return "usage: gnuplot -c <script name> <input file> <output file>";

            case NO_USAGE:
            default:
                return null;
        }
    }

    private static void addUsageComment(GnuPlotBuilder builder, int usageFlag) {
        String comment = getUsageComment(usageFlag);
        if(comment != null) {
            builder.addComment(comment);
        }
    }

    private static GnuPlotBuilder newBuilder() {
        GnuPlotBuilder builder = new GnuPlotBuilder();
        builder.setSettings(SETTINGS);
        return builder;
    }

    //=========================
    //line chart
    //=========================

    public static GnuPlotBuilder lineChart0(
            String title, String xlab, String ylab,
            String sep) {
        return lineChart0(
                title, xlab, ylab,
                GnuPlotBuilder.arg(1), sep, GnuPlotBuilder.arg(2),
                USAGE_ARG2
        );
    }

    public static GnuPlotBuilder lineChart0(
            String title, String xlab, String ylab,
            Path input, String sep, Path output) {
        return lineChart0(
                title, xlab, ylab,
                GnuPlotBuilder.quote(input), sep, GnuPlotBuilder.quote(output),
                USAGE_ARG0
        );
    }

    public static GnuPlotBuilder lineChart0(
            String title, String xlab, String ylab,
            String rawInput, String sep, String rawOutput) {
        return lineChart0(
                title, xlab, ylab,
                rawInput, sep, rawOutput,
                NO_USAGE
        );
    }

    public static GnuPlotBuilder lineChart0(
            String title, String xlab, String ylab,
            String rawInput, String sep, String rawOutput,
            int usageFlag) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getAutoGenerated());
        builder.addComment("type: line chart v0");
        addUsageComment(builder, usageFlag);
        builder.addComment("===style===");
        builder.setStyleDataLines();
        builder.setLegendOutsideRightTop();
        builder.addComment("===labels===");
        if(title != null) builder.setTitle(title);
        if(xlab != null) builder.setXLabel(xlab);
        if(ylab != null) builder.setYLabel(ylab);
        builder.addComment("===output===");
        builder.printPngCairo();
        builder.setRawOutput(rawOutput);
        builder.addComment("===plot===");
        if(sep != null) builder.setDataFileSeparator(sep);
        builder.plotRawRowBasedDataWithColumn1AsLabel(rawInput);
        return builder;
    }

    public static GnuPlotBuilder lineChart1(
            String title, String xlab, String ylab,
            String sep,
            Object xmin, Object xmax, Object ymin, Object ymax) {
        return lineChart1(
                title, xlab, ylab,
                GnuPlotBuilder.arg(1), sep, GnuPlotBuilder.arg(2),
                xmin, xmax, ymin, ymax,
                USAGE_ARG2
        );
    }

    public static GnuPlotBuilder lineChart1(
            String title, String xlab, String ylab,
            Path input, String sep, Path output,
            Object xmin, Object xmax, Object ymin, Object ymax) {
        return lineChart1(
                title, xlab, ylab,
                GnuPlotBuilder.quote(input), sep, GnuPlotBuilder.quote(output),
                xmin, xmax, ymin, ymax,
                USAGE_ARG0
        );
    }

    public static GnuPlotBuilder lineChart1(
            String title, String xlab, String ylab,
            String rawInput, String sep, String rawOutput,
            Object xmin, Object xmax, Object ymin, Object ymax) {
        return lineChart1(
                title, xlab, ylab,
                rawInput, sep, rawOutput,
                xmin, xmax, ymin, ymax,
                NO_USAGE
        );
    }

    public static GnuPlotBuilder lineChart1(
            String title, String xlab, String ylab,
            String rawInput, String sep, String rawOutput,
            Object xmin, Object xmax, Object ymin, Object ymax,
            int usageFlag) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getAutoGenerated());
        builder.addComment("type: line chart v1");
        addUsageComment(builder, usageFlag);
        builder.addComment("===style===");
        builder.setStyleDataLines();
        builder.setLegendOutsideRightTop();
        builder.addComment("===labels===");
        if(title != null) builder.setTitle(title);
        if(xlab != null) builder.setXLabel(xlab);
        if(ylab != null) builder.setYLabel(ylab);
        builder.addComment("===plot===");
        if(sep != null) builder.setDataFileSeparator(sep);
        builder.printUnknown();
        builder.plotRawRowBasedDataWithColumn1AsLabel(rawInput);
        builder.addComment("===output===");
        builder.printPngCairo();
        builder.setRawOutput(rawOutput);
        builder.setXRange(xmin, xmax);
        builder.setYRange(ymin, ymax);
        builder.replot();
        return builder;
    }

    public static GnuPlotBuilder interactionLineChart0(
            String title, String xlab, String ylab,
            String sep, int linewidth,
            Object xmin, Object xmax, Object ymin, Object ymax) {
        return interactionLineChart0(
                title, xlab, ylab,
                GnuPlotBuilder.arg(1), sep, GnuPlotBuilder.arg(2), linewidth,
                xmin, xmax, ymin, ymax,
                USAGE_ARG2
        );
    }

    public static GnuPlotBuilder interactionLineChart0(
            String title, String xlab, String ylab,
            Path input, String sep, Path output, int linewidth,
            Object xmin, Object xmax, Object ymin, Object ymax) {
        return interactionLineChart0(
                title, xlab, ylab,
                GnuPlotBuilder.quote(input), sep, GnuPlotBuilder.quote(output), linewidth,
                xmin, xmax, ymin, ymax,
                USAGE_ARG0
        );
    }

    public static GnuPlotBuilder interactionLineChart0(
            String title, String xlab, String ylab,
            String rawInput, String sep, String rawOutput, int linewidth,
            Object xmin, Object xmax, Object ymin, Object ymax) {
        return interactionLineChart0(
                title, xlab, ylab,
                rawInput, sep, rawOutput, linewidth,
                xmin, xmax, ymin, ymax,
                NO_USAGE
        );
    }

    public static GnuPlotBuilder interactionLineChart0(
            String title, String xlab, String ylab,
            String rawInput, String sep, String rawOutput, int linewidth,
            Object xmin, Object xmax, Object ymin, Object ymax,
            int usageFlag) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getAutoGenerated());
        builder.addComment("type: special line chart v1");
        addUsageComment(builder, usageFlag);
        builder.addComment("===style===");
        builder.setStyleDataLines();
        builder.setLegendOutsideRightTop();
        builder.addComment("===labels===");
        if(title != null) builder.setTitle(title);
        if(xlab != null) builder.setXLabel(xlab);
        if(ylab != null) builder.setYLabel(ylab);
        builder.addComment("===plot===");
        if(sep != null) builder.setDataFileSeparator(sep);
        builder.printUnknown();
        builder.plotRawSpecialLinePlot(rawInput, linewidth);
        builder.addComment("===output===");
        builder.printPngCairo();
        builder.setRawOutput(rawOutput);
        builder.setXRange(xmin, xmax);
        builder.setYRange(ymin, ymax);
        builder.replot();
        return builder;
    }

    //=========================
    //stacked bar
    //=========================

    public static GnuPlotBuilder stackedBarChart0(
            String title, String xlab, String ylab, String hlab,
            String sep) {
        return stackedBarChart0(title, xlab, ylab, hlab, GnuPlotBuilder.arg(1), sep, GnuPlotBuilder.arg(2), USAGE_ARG2);
    }

    public static GnuPlotBuilder stackedBarChart0(
            String title, String xlab, String ylab, String hlab,
            Path input, String sep, Path output) {
        return stackedBarChart0(title, xlab, ylab, hlab, GnuPlotBuilder.quote(input), sep, GnuPlotBuilder.quote(output), USAGE_ARG0);
    }

    public static GnuPlotBuilder stackedBarChart0(
            String title, String xlab, String ylab, String hlab,
            String rawInput, String sep, String rawOutput) {
        return stackedBarChart0(title, xlab, ylab, hlab, rawInput, sep, rawOutput, NO_USAGE);
    }

    public static GnuPlotBuilder stackedBarChart0(
            String title, String xlab, String ylab, String hlab,
            String rawInput, String sep, String rawOutput,
            int usageFlag) {
        GnuPlotBuilder builder = newBuilder();
        builder.add(getAutoGenerated());
        builder.addComment("type: stacked bar chart v0");
        addUsageComment(builder, usageFlag);
        builder.addComment("===style===");
        builder.setStyleDataHistograms();
        builder.setStyleHistrogramRowStacked();
        builder.setFillSolid();
        builder.setBoxWidthAbsolute(0.8);
        if(hlab == null) builder.setLegendOutsideRightTop();
        else builder.setLegendOutsideRightTop(hlab);
        builder.addComment("===labels===");
        if(title != null) builder.setTitle(title);
        if(xlab != null) builder.setXLabel(xlab);
        if(ylab != null) builder.setYLabel(ylab);
        builder.addComment("===output===");
        builder.printPngCairo();
        builder.setRawOutput(rawOutput);
        builder.addComment("===plot===");
        if(sep != null) builder.setDataFileSeparator(sep);
        builder.plotRawRowBasedDataWithColumn1AsLabel(rawInput);
        return builder;
    }
}
