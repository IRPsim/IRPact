package de.unileipzig.irpact.util.R.builder;

import de.unileipzig.irpact.util.R.builder.ggplot2.*;
import de.unileipzig.irpact.util.script.BuilderSettings;

import java.time.LocalDateTime;

/**
 * @author Daniel Abitz
 */
public final class RScriptFactory {

    public static final StringSettings SETTINGS = new StringSettings();

    private RScriptFactory() {
    }

    private static Comment getAutoGenerated() {
        return new Comment("automatic generated Rscript (" + LocalDateTime.now() + ")");
    }

    private static String getUsageComment(int usageFlag) {
        switch (usageFlag) {
            case BuilderSettings.USAGE_ARG0:
                return "usage: Rscript <scirpt name>";

            case BuilderSettings.USAGE_ARG2:
                return "usage: Rscript <script name> <input file> <output file>";

            case BuilderSettings.NO_USAGE:
            default:
                return null;
        }
    }

    private static Comment createUsageComment(int usageFlag) {
        String comment = getUsageComment(usageFlag);
        if(comment != null) {
            return new Comment(comment);
        } else {
            return null;
        }
    }

    private static RScriptBuilder newBuilder() {
        RScriptBuilder builder = new RScriptBuilder();
        builder.setSettings(SETTINGS);
        return builder;
    }

    //=========================
    //line chart
    //=========================

    public static RScriptBuilder lineChart0(BuilderSettings settings) {
        Comment autoComment = getAutoGenerated();
        Comment typeComment = new Comment("type: line chart v0");
        Comment usageComment = createUsageComment(settings.allowNull().getUsageFlag());

        Args args = new Args("args", 2);

        Library lib = new Library("ggplot2");

        ReadDotCsv csv = new ReadDotCsv("inputdata");
        csv.setFileName(settings.useArgsFlag() ? args.getNamedIndex(1) : settings.nonNull().getInputFile().toString());
        csv.setHeader(true);
        csv.setSep(settings.nonNull().getSep());
        csv.setColClasses(Element.NUMERIC, Element.NUMERIC, Element.CHARACTER);

        Ggplot plot = new Ggplot();

        GeomLine geomLine = new GeomLine();
        geomLine.setData(csv.getReturnName());
        if(settings.hasLineWidth()) geomLine.setSize(settings.nonNull().getLineWidth());
        if(settings.hasLineType()) geomLine.setLineType(settings.nonNull().getLineType());
        geomLine.aes().setX(settings.nonNull().getXArg());
        geomLine.aes().setY(settings.nonNull().getYArg());
        geomLine.aes().setGroup(settings.nonNull().getGrpArg());
        geomLine.aes().setColour(settings.nonNull().getGrpArg());

        Labs labs = new Labs();
        labs.setX(settings.nonNull().getXLab());
        labs.setY(settings.nonNull().getYLab());
        labs.setColour(settings.nonNull().getGrpLab());

        Ggsave save = new Ggsave();
        save.setFileName(settings.useArgsFlag() ? args.getNamedIndex(2) : settings.nonNull().getOutputFile().toString());
        if(settings.hasWidht()) save.setWidth(settings.nonNull().getWidht());
        if(settings.hasHeight()) save.setHeight(settings.nonNull().getHeight());
        if(settings.hasUnits()) save.setUnits(settings.nonNull().getUnits());
        if(settings.hasDpi()) save.setDpi(settings.nonNull().getDpi());

        RScriptBuilder builder = newBuilder();

        builder.add(autoComment);
        builder.add(typeComment);
        if(usageComment != null) builder.add(usageComment);
        builder.newLine();
        builder.add(args);
        builder.newLine();
        builder.add(lib);
        builder.newLine();
        builder.add(csv);
        builder.addLinked(plot, geomLine, labs);
        builder.add(save);
        builder.devoff();

        return builder;
    }

    //=========================
    //interaction line chart
    //=========================

    public static RScriptBuilder interactionLineChart1(BuilderSettings settings) {
        Comment autoComment = getAutoGenerated();
        Comment typeComment = new Comment("type: interaction line chart v1");
        Comment usageComment = createUsageComment(settings.allowNull().getUsageFlag());

        Args args = new Args("args", 2);

        Library lib = new Library("ggplot2");

        ReadDotCsv csv = new ReadDotCsv("inputdata");
        csv.setFileName(settings.useArgsFlag() ? args.getNamedIndex(1) : settings.nonNull().getInputFile().toString());
        csv.setHeader(true);
        csv.setSep(settings.nonNull().getSep());
        csv.setColClasses(Element.NUMERIC, Element.NUMERIC, Element.CHARACTER, Element.CHARACTER);

        Ggplot plot = new Ggplot();

        GeomLine geomLine = new GeomLine();
        geomLine.setData(csv.getReturnName());
        if(settings.hasLineWidth()) geomLine.setSize(settings.nonNull().getLineWidth());
        geomLine.aes().setX(settings.nonNull().getXArg());
        geomLine.aes().setY(settings.nonNull().getYArg());
        geomLine.aes().setGroupInteraction(settings.nonNull().getGrpArg(), settings.nonNull().getDistinctArg());
        geomLine.aes().setColour(settings.nonNull().getGrpArg());
        geomLine.aes().setLinetype(settings.nonNull().getDistinctArg());

        Labs labs = new Labs();
        labs.setX(settings.nonNull().getXLab());
        labs.setY(settings.nonNull().getYLab());
        labs.setColour(settings.nonNull().getGrpLab());
        labs.setLinetype(settings.nonNull().getDistinctLab());

        ScaleLinetypeManual scaleLinetypes = new ScaleLinetypeManual();
        if(settings.hasFirstLinetype() || settings.hasSecondLinetype()) {
            scaleLinetypes.setValues(settings.nonNull().getFirstLinetype(), settings.nonNull().getSecondLinetype());
        }

        Ggsave save = new Ggsave();
        save.setFileName(settings.useArgsFlag() ? args.getNamedIndex(2) : settings.nonNull().getOutputFile().toString());
        if(settings.hasWidht()) save.setWidth(settings.nonNull().getWidht());
        if(settings.hasHeight()) save.setHeight(settings.nonNull().getHeight());
        if(settings.hasUnits()) save.setUnits(settings.nonNull().getUnits());
        if(settings.hasDpi()) save.setDpi(settings.nonNull().getDpi());

        RScriptBuilder builder = newBuilder();

        builder.add(autoComment);
        builder.add(typeComment);
        if(usageComment != null) builder.add(usageComment);
        builder.newLine();
        builder.add(args);
        builder.newLine();
        builder.add(lib);
        builder.newLine();
        builder.add(csv);
        builder.addLinked(plot, geomLine, scaleLinetypes, labs);
        builder.add(save);
        builder.devoff();

        return builder;
    }

    //=========================
    //stacked bar chart
    //=========================

    public static RScriptBuilder stackedBarChart0(BuilderSettings settings) {
        Comment autoComment = getAutoGenerated();
        Comment typeComment = new Comment("type: stacked bar chart v0");
        Comment usageComment = createUsageComment(settings.allowNull().getUsageFlag());

        Args args = new Args("args", 2);

        Library lib = new Library("ggplot2");

        ReadDotCsv csv = new ReadDotCsv("inputdata");
        csv.setFileName(settings.useArgsFlag() ? args.getNamedIndex(1) : settings.nonNull().getInputFile().toString());
        csv.setHeader(true);
        csv.setSep(settings.nonNull().getSep());
        csv.setColClasses(Element.NUMERIC, Element.CHARACTER, Element.NUMERIC);

        Ggplot plot = new Ggplot();
        plot.setData(csv.getReturnName());
        plot.aes().setX(settings.nonNull().getXArg());
        plot.aes().setY(settings.nonNull().getYArg());
        plot.aes().setFill(settings.nonNull().getFillArg());

        GeomBar geomBar = new GeomBar();
        geomBar.setPosition(Element.STACK);
        geomBar.setStat(Element.IDENTITY);

        Labs labs = new Labs();
        labs.setX(settings.nonNull().getXLab());
        labs.setY(settings.nonNull().getYLab());
        labs.setFill(settings.nonNull().getFillLab());

        Ggsave save = new Ggsave();
        save.setFileName(settings.useArgsFlag() ? args.getNamedIndex(2) : settings.nonNull().getOutputFile().toString());
        if(settings.hasWidht()) save.setWidth(settings.nonNull().getWidht());
        if(settings.hasHeight()) save.setHeight(settings.nonNull().getHeight());
        if(settings.hasUnits()) save.setUnits(settings.nonNull().getUnits());
        if(settings.hasDpi()) save.setDpi(settings.nonNull().getDpi());

        RScriptBuilder builder = newBuilder();

        builder.add(autoComment);
        builder.add(typeComment);
        if(usageComment != null) builder.add(usageComment);
        builder.newLine();
        builder.add(args);
        builder.newLine();
        builder.add(lib);
        builder.newLine();
        builder.add(csv);
        builder.addLinked(plot, geomBar, labs);
        builder.add(save);
        builder.devoff();

        return builder;
    }
}
